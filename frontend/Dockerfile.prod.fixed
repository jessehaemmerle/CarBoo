# Alternative production Dockerfile with memory optimization and error handling
FROM node:20-alpine AS builder

# Set memory limits for Node.js build process
ENV NODE_OPTIONS="--max-old-space-size=2048"

WORKDIR /app

# Install dependencies first (better caching)
COPY package.json yarn.lock ./
RUN yarn install --frozen-lockfile --network-timeout 300000

# Copy source code
COPY . .

# Build arguments
ARG REACT_APP_BACKEND_URL
ENV REACT_APP_BACKEND_URL=$REACT_APP_BACKEND_URL

# Build the application with error handling
RUN set -e; \
    echo "Starting React build..."; \
    yarn build && \
    echo "Build completed successfully" || \
    (echo "Build failed, checking for common issues..."; \
     ls -la /app/; \
     exit 1)

# Production stage with minimal nginx
FROM nginx:alpine

# Install curl for health checks
RUN apk add --no-cache curl

# Copy built application
COPY --from=builder /app/build /usr/share/nginx/html

# Copy nginx configuration
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Set proper permissions
RUN chown -R nginx:nginx /usr/share/nginx/html && \
    chown -R nginx:nginx /etc/nginx/conf.d && \
    chmod -R 755 /usr/share/nginx/html

# Create nginx user if not exists and set up logging
RUN touch /var/log/nginx/error.log /var/log/nginx/access.log && \
    chown nginx:nginx /var/log/nginx/error.log /var/log/nginx/access.log

# Health check with better error handling
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
  CMD curl -f http://localhost/health || (echo "Health check failed"; nginx -t; exit 1)

# Expose port
EXPOSE 80

# Start nginx with error logging
CMD ["sh", "-c", "nginx -g 'daemon off;' 2>&1 | tee /var/log/nginx/error.log"]