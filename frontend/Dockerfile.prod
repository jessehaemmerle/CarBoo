# — Build stage —
FROM node:20-alpine AS builder

# Set memory limits for Node.js build process
ENV NODE_OPTIONS="--max-old-space-size=2048"

WORKDIR /app

COPY package.json yarn.lock ./
RUN yarn install --frozen-lockfile --network-timeout 300000

COPY . .
ARG REACT_APP_BACKEND_URL
ENV REACT_APP_BACKEND_URL=$REACT_APP_BACKEND_URL

# Build with error handling
RUN set -e; \
    echo "Starting React build..."; \
    yarn build && \
    echo "Build completed successfully" || \
    (echo "Build failed"; exit 1)

# — Production stage —
FROM nginx:alpine
RUN apk add --no-cache curl

# Copy build artifacts
COPY --from=builder /app/build /usr/share/nginx/html

# Copy nginx configuration
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Set permissions
RUN chown -R nginx:nginx /usr/share/nginx/html \
    && chown -R nginx:nginx /etc/nginx/conf.d \
    && chmod -R 755 /usr/share/nginx/html

# Enhanced health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
  CMD curl -f http://localhost/health || (echo "Health check failed"; nginx -t; exit 1)

EXPOSE 80

# Start with better error logging
CMD ["sh", "-c", "nginx -g 'daemon off;'"]
